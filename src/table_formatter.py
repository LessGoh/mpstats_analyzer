"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—à
"""

import pandas as pd
import streamlit as st
from typing import Dict, List


class TableFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self):
        self.display_columns = [
            '–ü–æ–∑–∏—Ü–∏—è',
            '–ü—Ä–µ–¥–º–µ—Ç—ã', 
            '–û–±—â–∏–π –±–∞–ª–ª',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            '–í—ã—Ä—É—á–∫–∞',
            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏',
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å, –¥–Ω.',
            '% —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º',
            '% –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏',
            '–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞'
        ]
        
        self.column_names = {
            '–ü–æ–∑–∏—Ü–∏—è': '#',
            '–ü—Ä–µ–¥–º–µ—Ç—ã': '–ù–∏—à–∞',
            '–û–±—â–∏–π –±–∞–ª–ª': '–ë–∞–ª–ª',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û—Ü–µ–Ω–∫–∞',
            '–í—ã—Ä—É—á–∫–∞': '–í—ã—Ä—É—á–∫–∞',
            '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏': '–°—Ä. —Ü–µ–Ω–∞',
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å, –¥–Ω.': '–û–±–æ—Ä–∞—á.',
            '% —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º': '% —Ç–æ–≤. –¥–≤–∏–∂.',
            '% –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏': '% –ø—Ä–æ–¥. –ø—Ä–æ–¥.',
            '–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞': '–í—ã—Ä./–ø—Ä–æ–¥.'
        }
    
    def format_display_table(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Streamlit
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∏—à
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df_display = df[self.display_columns].copy()
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        df_display = df_display.rename(columns=self.column_names)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        df_display = self._format_numeric_columns(df_display)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        df_display = self._add_category_emojis(df_display, df)
        
        return df_display
    
    def _format_numeric_columns(self, df: pd.DataFrame) -> pd.DataFrame:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        df_formatted = df.copy()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã—Ä—É—á–∫—É
        if '–í—ã—Ä—É—á–∫–∞' in df_formatted.columns:
            df_formatted['–í—ã—Ä—É—á–∫–∞'] = df_formatted['–í—ã—Ä—É—á–∫–∞'].apply(self._format_currency)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
        if '–°—Ä. —Ü–µ–Ω–∞' in df_formatted.columns:
            df_formatted['–°—Ä. —Ü–µ–Ω–∞'] = df_formatted['–°—Ä. —Ü–µ–Ω–∞'].apply(self._format_price)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å
        if '–û–±–æ—Ä–∞—á.' in df_formatted.columns:
            df_formatted['–û–±–æ—Ä–∞—á.'] = df_formatted['–û–±–æ—Ä–∞—á.'].apply(self._format_days)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        percentage_columns = ['% —Ç–æ–≤. –¥–≤–∏–∂.', '% –ø—Ä–æ–¥. –ø—Ä–æ–¥.']
        for col in percentage_columns:
            if col in df_formatted.columns:
                df_formatted[col] = df_formatted[col].apply(self._format_percentage)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã—Ä—É—á–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
        if '–í—ã—Ä./–ø—Ä–æ–¥.' in df_formatted.columns:
            df_formatted['–í—ã—Ä./–ø—Ä–æ–¥.'] = df_formatted['–í—ã—Ä./–ø—Ä–æ–¥.'].apply(self._format_currency)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–ª
        if '–ë–∞–ª–ª' in df_formatted.columns:
            df_formatted['–ë–∞–ª–ª'] = df_formatted['–ë–∞–ª–ª'].apply(lambda x: f"{x:.0f}")
        
        return df_formatted
    
    def _add_category_emojis(self, df_display: pd.DataFrame, df_original: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—Ü–µ–Ω–∫–∏"""
        df_with_emojis = df_display.copy()
        
        if '–û—Ü–µ–Ω–∫–∞' in df_with_emojis.columns and '–≠–º–æ–¥–∑–∏' in df_original.columns:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —ç–º–æ–¥–∑–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            emojis = df_original['–≠–º–æ–¥–∑–∏'].values
            categories = df_with_emojis['–û—Ü–µ–Ω–∫–∞'].values
            
            df_with_emojis['–û—Ü–µ–Ω–∫–∞'] = [
                f"{emoji} {category}" for emoji, category in zip(emojis, categories)
            ]
        
        return df_with_emojis
    
    def _format_currency(self, value: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if pd.isna(value) or value == 0:
            return "0 ‚ÇΩ"
        
        if value >= 1_000_000:
            return f"{value/1_000_000:.1f}–ú ‚ÇΩ"
        elif value >= 1_000:
            return f"{value/1_000:.0f}–ö ‚ÇΩ"
        else:
            return f"{value:.0f} ‚ÇΩ"
    
    def _format_price(self, value: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã"""
        if pd.isna(value) or value == 0:
            return "0 ‚ÇΩ"
        
        if value >= 1_000:
            return f"{value/1_000:.1f}–ö ‚ÇΩ"
        else:
            return f"{value:.0f} ‚ÇΩ"
    
    def _format_percentage(self, value: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã"""
        if pd.isna(value):
            return "0%"
        return f"{value:.1f}%"
    
    def _format_days(self, value: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        if pd.isna(value):
            return "0 –¥–Ω."
        return f"{value:.0f} –¥–Ω."
    
    def create_styled_table(self, df_display: pd.DataFrame, df_original: pd.DataFrame) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ Streamlit —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        
        Args:
            df_display: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_original: –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ü–≤–µ—Ç–∞—Ö
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç—Ä–æ–∫
        colors = df_original['–¶–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'].values
        
        # –°–æ–∑–¥–∞–µ–º HTML —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–æ–∫
        styles = []
        for i, color in enumerate(colors):
            styles.append(f"""
                <style>
                .row-{i} {{
                    background-color: {color}20 !important;
                    border-left: 4px solid {color} !important;
                }}
                </style>
            """)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        for style in styles:
            st.markdown(style, unsafe_allow_html=True)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df_display,
            use_container_width=True,
            hide_index=True,
            height=800
        )
    
    def create_summary_metrics(self, scoring_summary: Dict) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        
        Args:
            scoring_summary: –°–ª–æ–≤–∞—Ä—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        if not scoring_summary:
            return
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üìä –í—Å–µ–≥–æ –Ω–∏—à",
                value=scoring_summary.get('total_niches', 0)
            )
        
        with col2:
            avg_score = scoring_summary.get('avg_score', 0)
            st.metric(
                label="‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª",
                value=f"{avg_score:.1f}"
            )
        
        with col3:
            excellent_count = scoring_summary.get('excellent_niches', 0)
            st.metric(
                label="üü¢ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–∏—à–∏",
                value=excellent_count
            )
        
        with col4:
            good_count = scoring_summary.get('good_niches', 0)
            st.metric(
                label="üü° –•–æ—Ä–æ—à–∏–µ –Ω–∏—à–∏",
                value=good_count
            )
    
    def create_distribution_chart(self, distribution: Dict[str, int]) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∏—à –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        
        Args:
            distribution: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        if not distribution:
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        categories = list(distribution.keys())
        counts = list(distribution.values())
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        colors = ['#22c55e', '#eab308', '#f97316', '#ef4444']
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        chart_data = pd.DataFrame({
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': categories,
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': counts,
            '–¶–≤–µ—Ç': colors[:len(categories)]
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∏—à –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.bar_chart(
                chart_data.set_index('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                height=300
            )
        
        with col2:
            st.write("**–õ–µ–≥–µ–Ω–¥–∞:**")
            for category, count, color in zip(categories, counts, colors):
                st.markdown(
                    f'<div style="display: flex; align-items: center; margin: 5px 0;">'
                    f'<div style="width: 20px; height: 20px; background-color: {color}; '
                    f'margin-right: 10px; border-radius: 3px;"></div>'
                    f'<span>{category}: {count}</span></div>',
                    unsafe_allow_html=True
                )
