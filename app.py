"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∏—à mpstats
"""

import streamlit as st
import pandas as pd
from src.data_loader import DataLoader
from src.niche_scorer import NicheScorer
from src.table_formatter import TableFormatter

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∏—à mpstats",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f2937;
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(90deg, #3b82f6, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .info-box {
        background-color: #f8fafc;
        border-left: 4px solid #3b82f6;
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 0.5rem;
    }
    
    .success-box {
        background-color: #f0fdf4;
        border-left: 4px solid #22c55e;
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<h1 class="main-header">üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∏—à mpstats</h1>', unsafe_allow_html=True)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("""
    <div class="info-box">
        <h3>üéØ –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h3>
        <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∫–∞ –Ω–∏—à Wildberries –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–æ–≤ mpstats. 
        –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–∏—à–∏ –ø–æ 6 –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –≤—ã–¥–∞–µ—Ç —Ç–æ–ø-30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π.</p>
        
        <h4>üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:</h4>
        <ul>
            <li><strong>–í—ã—Ä—É—á–∫–∞</strong> - –µ–º–∫–æ—Å—Ç—å —Ä—ã–Ω–∫–∞</li>
            <li><strong>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏</strong> - —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫</li>
            <li><strong>–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å</strong> - —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂</li>
            <li><strong>% —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º</strong> - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∏—à–∏</li>
            <li><strong>% –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏</strong> - —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏</li>
            <li><strong>–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞</strong> - –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    with st.sidebar:
        st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª mpstats",
            type=['xlsx', 'xls'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç '–í—ã–±–æ—Ä –Ω–∏—à–∏' –∏–∑ mpstats –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
        )
        
        if uploaded_file:
            st.success("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            file_details = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": uploaded_file.name,
                "–†–∞–∑–º–µ—Ä": f"{uploaded_file.size / 1024:.1f} KB"
            }
            
            for key, value in file_details.items():
                st.write(f"**{key}:** {value}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if uploaded_file is None:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        show_instructions()
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        process_uploaded_file(uploaded_file)


def show_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("""
        ### üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        
        1. **–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç** –∏–∑ mpstats:
           - –í–æ–π–¥–∏—Ç–µ –≤ mpstats
           - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–í—ã–±–æ—Ä –Ω–∏—à–∏"
           - –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2+ –º–µ—Å—è—Ü–∞)
           - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel
        
        2. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        
        3. **–ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑** —Ç–æ–ø-30 –Ω–∏—à —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        """)
    
    with col2:
        st.markdown("""
        ### üé® –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è:
        
        - üü¢ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–∏—à–∏** (70-90 –±–∞–ª–ª–æ–≤)
        - üü° **–•–æ—Ä–æ—à–∏–µ –Ω–∏—à–∏** (50-69 –±–∞–ª–ª–æ–≤)  
        - üü† **–°—Ä–µ–¥–Ω–∏–µ –Ω–∏—à–∏** (30-49 –±–∞–ª–ª–æ–≤)
        - üî¥ **–°–ª–∞–±—ã–µ –Ω–∏—à–∏** (0-29 –±–∞–ª–ª–æ–≤)
        
        ### üìä –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
        - –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–ø-30 –Ω–∏—à
        - –î–µ—Ç–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
        - –°–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        - –î–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        """)


def process_uploaded_file(uploaded_file):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    data_loader = DataLoader()
    scorer = NicheScorer()
    formatter = TableFormatter()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        status_text.text("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        progress_bar.progress(20)
        
        df = data_loader.load_excel_file(uploaded_file)
        
        if df is None:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
            return
        
        # –®–∞–≥ 2: –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
        status_text.text("üßÆ –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –Ω–∏—à...")
        progress_bar.progress(50)
        
        df_scored = scorer.calculate_niche_scores(df)
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–Ω–∏—à
        status_text.text("üèÜ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞...")
        progress_bar.progress(70)
        
        df_top = scorer.get_top_niches(df_scored)
        
        # –®–∞–≥ 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_text.text("üé® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é...")
        progress_bar.progress(90)
        
        df_display = formatter.format_display_table(df_top)
        scoring_summary = scorer.get_scoring_summary(df_scored)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        progress_bar.progress(100)
        status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –û—á–∏—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar.empty()
        status_text.empty()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        show_results(df_display, df_top, scoring_summary, scorer)
        
    except Exception as e:
        st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        progress_bar.empty()
        status_text.empty()


def show_results(df_display, df_original, scoring_summary, scorer):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    st.markdown(f"""
    <div class="success-box">
        <h3>üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</h3>
        <p>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ <strong>{scoring_summary.get('total_niches', 0)}</strong> –Ω–∏—à. 
        –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø-30 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ª—É—á—à–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    formatter = TableFormatter()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("---")
    st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    formatter.create_summary_metrics(scoring_summary)
    
    # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    st.markdown("---")
    distribution = scoring_summary.get('distribution', {})
    formatter.create_distribution_chart(distribution)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown("---")
    st.subheader("üèÜ –¢–æ–ø-30 –Ω–∏—à –ø–æ –æ—Ü–µ–Ω–∫–µ")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        min_score_filter = st.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª",
            min_value=0,
            max_value=90,
            value=0,
            help="–§–∏–ª—å—Ç—Ä –Ω–∏—à –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –±–∞–ª–ª—É"
        )
    
    with col2:
        category_filter = st.selectbox(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∏—à",
            options=['–í—Å–µ'] + list(distribution.keys()),
            help="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏"
        )
    
    with col3:
        search_term = st.text_input(
            "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏—à–∏...",
            help="–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏"
        )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    df_filtered = apply_filters(
        df_display, df_original, min_score_filter, category_filter, search_term
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    if df_filtered.empty:
        st.warning("üòî –ù–µ—Ç –Ω–∏—à, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    else:
        st.info(f"üìã –ü–æ–∫–∞–∑–∞–Ω–æ {len(df_filtered)} –∏–∑ {len(df_display)} –Ω–∏—à")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            df_filtered,
            use_container_width=True,
            hide_index=True,
            height=600
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É—á—à–µ–π –Ω–∏—à–µ
        if len(df_filtered) > 0:
            show_top_niche_info(df_original.iloc[0])


def apply_filters(df_display, df_original, min_score, category, search_term):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ç–∞–±–ª–∏—Ü–µ"""
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    score_mask = df_original['–û–±—â–∏–π –±–∞–ª–ª'] >= min_score
    
    category_mask = True
    if category != '–í—Å–µ':
        category_mask = df_original['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category
    
    search_mask = True
    if search_term:
        search_mask = df_original['–ü—Ä–µ–¥–º–µ—Ç—ã'].str.contains(
            search_term, case=False, na=False
        )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    combined_mask = score_mask & category_mask & search_mask
    
    return df_display[combined_mask].reset_index(drop=True)


def show_top_niche_info(top_niche):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–µ–π –Ω–∏—à–µ"""
    
    st.markdown("---")
    st.subheader("ü•á –õ—É—á—à–∞—è –Ω–∏—à–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown(f"""
        **–ù–∏—à–∞:** {top_niche['–ü—Ä–µ–¥–º–µ—Ç—ã']}  
        **–û–±—â–∏–π –±–∞–ª–ª:** {top_niche['–û–±—â–∏–π –±–∞–ª–ª']:.0f} {top_niche['–≠–º–æ–¥–∑–∏']}  
        **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {top_niche['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}
        """)
    
    with col2:
        st.markdown(f"""
        **–í—ã—Ä—É—á–∫–∞:** {top_niche['–í—ã—Ä—É—á–∫–∞']:,.0f} ‚ÇΩ  
        **–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:** {top_niche['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏']:,.0f} ‚ÇΩ  
        **–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å:** {top_niche['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å, –¥–Ω.']:.0f} –¥–Ω–µ–π  
        **–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:** {top_niche['–í—ã—Ä—É—á–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞']:,.0f} ‚ÇΩ
        """)


if __name__ == "__main__":
    main()
